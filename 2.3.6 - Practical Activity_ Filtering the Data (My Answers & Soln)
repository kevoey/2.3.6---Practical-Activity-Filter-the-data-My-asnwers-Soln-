{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d52a03ce",
   "metadata": {},
   "source": [
    "# 2.3.6 Filtering the data - My Answers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e481541",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Year</th>\n",
       "      <th>Age</th>\n",
       "      <th>IMDb</th>\n",
       "      <th>Rotten Tomatoes</th>\n",
       "      <th>Directors</th>\n",
       "      <th>Genres</th>\n",
       "      <th>Country</th>\n",
       "      <th>Language</th>\n",
       "      <th>Runtime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.87</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>Action,Adventure,Sci-Fi,Thriller</td>\n",
       "      <td>United States,United Kingdom</td>\n",
       "      <td>English,Japanese,French</td>\n",
       "      <td>148.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Matrix</td>\n",
       "      <td>1999</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.7</td>\n",
       "      <td>0.87</td>\n",
       "      <td>Lana Wachowski,Lilly Wachowski</td>\n",
       "      <td>Action,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.84</td>\n",
       "      <td>Anthony Russo,Joe Russo</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Back to the Future</td>\n",
       "      <td>1985</td>\n",
       "      <td>7+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.96</td>\n",
       "      <td>Robert Zemeckis</td>\n",
       "      <td>Adventure,Comedy,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>116.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Good, the Bad and the Ugly</td>\n",
       "      <td>1966</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>0.97</td>\n",
       "      <td>Sergio Leone</td>\n",
       "      <td>Western</td>\n",
       "      <td>Italy,Spain,West Germany</td>\n",
       "      <td>Italian</td>\n",
       "      <td>161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16739</th>\n",
       "      <td>The Ghosts of Buxley Hall</td>\n",
       "      <td>1980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bruce Bilson</td>\n",
       "      <td>Comedy,Family,Fantasy,Horror</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>120.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16740</th>\n",
       "      <td>The Poof Point</td>\n",
       "      <td>2001</td>\n",
       "      <td>7+</td>\n",
       "      <td>4.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neal Israel</td>\n",
       "      <td>Comedy,Family,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16741</th>\n",
       "      <td>Sharks of Lost Island</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neil Gelinas</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16742</th>\n",
       "      <td>Man Among Cheetahs</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Richard Slater-Jones</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16743</th>\n",
       "      <td>In Beaver Valley</td>\n",
       "      <td>1950</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James Algar</td>\n",
       "      <td>Documentary,Short,Family</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16744 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Title  Year  Age  IMDb  Rotten Tomatoes  \\\n",
       "0                           Inception  2010  13+   8.8             0.87   \n",
       "1                          The Matrix  1999  18+   8.7             0.87   \n",
       "2              Avengers: Infinity War  2018  13+   8.5             0.84   \n",
       "3                  Back to the Future  1985   7+   8.5             0.96   \n",
       "4      The Good, the Bad and the Ugly  1966  18+   8.8             0.97   \n",
       "...                               ...   ...  ...   ...              ...   \n",
       "16739       The Ghosts of Buxley Hall  1980  NaN   6.2              NaN   \n",
       "16740                  The Poof Point  2001   7+   4.7              NaN   \n",
       "16741           Sharks of Lost Island  2013  NaN   5.7              NaN   \n",
       "16742              Man Among Cheetahs  2017  NaN   6.6              NaN   \n",
       "16743                In Beaver Valley  1950  NaN   NaN              NaN   \n",
       "\n",
       "                            Directors                            Genres  \\\n",
       "0                   Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
       "1      Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
       "2             Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
       "3                     Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
       "4                        Sergio Leone                           Western   \n",
       "...                               ...                               ...   \n",
       "16739                    Bruce Bilson      Comedy,Family,Fantasy,Horror   \n",
       "16740                     Neal Israel              Comedy,Family,Sci-Fi   \n",
       "16741                    Neil Gelinas                       Documentary   \n",
       "16742            Richard Slater-Jones                       Documentary   \n",
       "16743                     James Algar          Documentary,Short,Family   \n",
       "\n",
       "                            Country                 Language  Runtime  \n",
       "0      United States,United Kingdom  English,Japanese,French    148.0  \n",
       "1                     United States                  English    136.0  \n",
       "2                     United States                  English    149.0  \n",
       "3                     United States                  English    116.0  \n",
       "4          Italy,Spain,West Germany                  Italian    161.0  \n",
       "...                             ...                      ...      ...  \n",
       "16739                 United States                  English    120.0  \n",
       "16740                 United States                  English     90.0  \n",
       "16741                 United States                  English      NaN  \n",
       "16742                 United States                  English      NaN  \n",
       "16743                 United States                  English     32.0  \n",
       "\n",
       "[16744 rows x 10 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "movies = pd.read_excel('movies.xlsx')\n",
    "movies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6ff9c6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ott"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f584c23a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Determine the column names and data types of the DataFrame. (Hint: Name the DataFrames movies and ott.)\n",
    "\n",
    "list(movies)\n",
    "movies.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8493e12c",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(ott)\n",
    "ott.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de5dbe45",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Filter the DataFrame to only work with the numeric variables. \n",
    "    #Create a new DataFrame to not overwrite the current movies DataFrame. For example, movies_num.\n",
    "    #Specify the movies DataFrame and use the select_dtypes() function to only select the numeric variables as number. \n",
    "    #(Hint: movies.select_dtypes('number'))\n",
    "    #Delete/Drop the Year column by specifying the column name, Year is not a numeric value in this instance \n",
    "    #(Hint: use axis=1 to drop labels from the column, the default is 0 â€“ this is the index or rows)\n",
    "\n",
    "movies_num = movies.select_dtypes('number')\n",
    "movies_num = movies_num.drop('Year',axis=1)\n",
    "movies_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d68ea4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate the IQR (Q1 and Q3) of each column, except the Year column. \n",
    "#Name the variable to calculate Q1 and employ the DataFrame.quantile(0.25) function. Do the same for Q3.\n",
    "#View both Q1 and Q3.\n",
    "\n",
    "Q1_IMDb = movies['IMDb'].quantile(0.25)\n",
    "Q3_IMDb = movies['IMDb'].quantile(0.75)\n",
    "\n",
    "IQR_IMDb = Q3_IMDb - Q1_IMDb\n",
    "IQR_IMDb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bdb7914",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_Rotten_Tomatoes = movies['Rotten Tomatoes'].quantile(0.25)\n",
    "Q3_Rotten_Tomatoes = movies['Rotten Tomatoes'].quantile(0.75)\n",
    "\n",
    "IQR_Rotten_Tomatoes = Q3_Rotten_Tomatoes - Q1_Rotten_Tomatoes\n",
    "IQR_Rotten_Tomatoes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "822e917f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_Runtime = movies['Runtime'].quantile(0.25)\n",
    "Q3_Runtime = movies['Runtime'].quantile(0.75)\n",
    "\n",
    "IQR_Runtime = Q3_Runtime - Q1_Runtime\n",
    "IQR_Runtime\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f4c50d",
   "metadata": {},
   "outputs": [],
   "source": [
    "movies_num.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "faad74da",
   "metadata": {},
   "outputs": [],
   "source": [
    "range_IMDb = movies['IMDb'].max() - movies['IMDb'].min() \n",
    "range_IMDb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf8b72c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "range_Rotten_Tomatoes = movies['Rotten Tomatoes'].max() - movies['Rotten Tomatoes'].min() \n",
    "range_Rotten_Tomatoes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "523a230c",
   "metadata": {},
   "outputs": [],
   "source": [
    "range_Runtime = movies['Runtime'].max() - movies['Runtime'].min() \n",
    "range_Runtime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9dba21ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1_movies_num = movies_num.quantile(0.25)\n",
    "Q3_movies_num = movies_num.quantile(0.75)\n",
    "\n",
    "IQR_movies_num = Q3_movies_num - Q1_movies_num\n",
    "IQR_movies_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0b6f4fcd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors', 'Genres', 'Country', 'Language', 'Runtime']\n"
     ]
    }
   ],
   "source": [
    "print(list(movies.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "157eda98",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solution \n",
    "\n",
    "# Activity 2.3.6. Solution\n",
    "\n",
    "# Import the necessary packages\n",
    "import pandas as pd\n",
    "\n",
    "# Import the movies data set\n",
    "movies = pd.read_excel('movies.xlsx')\n",
    "\n",
    "# View the DataFrame\n",
    "movies.head()\n",
    "\n",
    "# Import the ott data set\n",
    "ott = pd.read_csv('ott.csv')\n",
    "\n",
    "# View the DataFrame\n",
    "ott.head()\n",
    "\n",
    "# Validate the data types\n",
    "print(movies.dtypes)\n",
    "print(ott.dtypes)\n",
    "\n",
    "# Determine the column names\n",
    "print(list(movies.columns))\n",
    "print(list(ott.columns))\n",
    "\n",
    "# Filter the DataFrame according to numeric variables\n",
    "# Calculate the IQR\n",
    "movies_num = movies.select_dtypes('number')\n",
    "movies_num = movies_num.drop('Year', axis = 1)\n",
    "\n",
    "# Calculate Q1 and Q3\n",
    "Q1 = movies_num.quantile(0.25)\n",
    "Q3 = movies_num.quantile(0.75)\n",
    "\n",
    "# View the output\n",
    "print(Q1)\n",
    "print(Q3)\n",
    "\n",
    "# Calculate the IQR\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# View the outpu\n",
    "print(IQR)\n",
    "\n",
    "# Determine the descriptive statistics\n",
    "movies_num.describe()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
